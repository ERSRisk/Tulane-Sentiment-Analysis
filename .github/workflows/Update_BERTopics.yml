name: Update BERT

on:
  #schedule:
    #- cron: '0 7 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync with origin
        run: |
          git fetch origin
          git pull --rebase --autostash origin main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system tools (jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download risk model
        run: |
          mkdir -p Model_training
          curl -L -o Model_training/risk_mlp_model.pkl \
            "https://github.com/ERSRisk/Tulane-Sentiment-Analysis/releases/download/regression/risk_mlp_model.pkl"

      - name: Run script
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_NEWS }}
          GEMINI_API_KEY_X: ${{ secrets.GEMINI_API_KEY_X }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
          X_API_KEY: ${{ secrets.X_API_KEY }}
          COOKIE_HEADER: ${{ secrets.COOKIE_HEADER }}
          PAID_API_KEY: ${{ secrets.PAID_API_KEY }}
        run: |
          python Model_training/BERT_update.py

      - name: Commit and push outputs (idempotent)
        shell: bash
        run: |
          set -euo pipefail

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          {
            echo 'BERTopic_results2.csv'
            echo 'Model_training/BERTopic_results.csv'
            echo 'Online_Extraction/all_RSS.json'
            echo 'Model_training/BERTopic_model'
          } | while read -r p; do
               grep -qxF "$p" .gitignore || echo "$p" >> .gitignore
            done
          git add .gitignore
          
          add_if_exists () { for f in "$@"; do [ -f "$f" ] && git add "$f"; done; }
          add_if_exists \
            Model_training/Step1.csv.gz \
            Model_training/BERTopic_results2.csv.gz \
            Model_training/topic_trend.csv \
            Model_training/topics_BERT.json \
            Model_training/unmatched_topics.json \
            BERTopic_before.csv

          echo "== git status =="
          git status -s || true
          echo "== ls outputs =="
          ls -lh Model_training/Step1.csv.gz               || true
          ls -lh Model_training/BERTopic_results2.csv.gz   || true
          ls -lh Model_training/topic_trend.csv            || true
          ls -lh Model_training/topics_BERT.json           || true
          ls -lh Model_training/unmatched_topics.json      || true
          ls -lh BERTopic_before.csv                       || true

          if ! git diff --cached --quiet; then
            git commit -m "Update outputs (conditional add)"
            git pull --rebase --autostash origin "${GITHUB_REF_NAME:-main}" || true
            git push origin HEAD:"${GITHUB_REF_NAME:-main}" || true
          else
            echo "Nothing to commit."
          fi

      - name: Upload model to GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          RELEASE_TAG="rss_json"
          FILE_PATH="Model_training/BERTopic_model"
          FILE_NAME="BERTopic_model"

          # Fetch (or create) the release
          rel=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/ERSRisk/Tulane-Sentiment-Analysis/releases/tags/${RELEASE_TAG}")
          release_id=$(echo "$rel" | jq -r '.id')

          if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
            rel=$(curl -s -X POST -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/ERSRisk/Tulane-Sentiment-Analysis/releases \
              -d "{\"tag_name\":\"${RELEASE_TAG}\",\"name\":\"${RELEASE_TAG}\",\"draft\":false,\"prerelease\":false}")
            release_id=$(echo "$rel" | jq -r '.id')
          fi

          # Delete existing asset with same name (if present)
          assets=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/ERSRisk/Tulane-Sentiment-Analysis/releases/${release_id}/assets")
          asset_id=$(echo "$assets" | jq -r --arg n "$FILE_NAME" '.[]? | select(.name==$n) | .id')
          if [ -n "$asset_id" ] && [ "$asset_id" != "null" ]; then
            curl -s -X DELETE -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/ERSRisk/Tulane-Sentiment-Analysis/releases/assets/${asset_id}" >/dev/null
          fi

          # Upload the new binary
          upload_url=$(echo "$rel" | jq -r '.upload_url' | sed 's/{.*}//')
          curl -s -H "Authorization: token $GH_TOKEN" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @"${FILE_PATH}" \
               "${upload_url}?name=${FILE_NAME}" >/dev/null
          echo "Uploaded ${FILE_NAME} to release ${RELEASE_TAG}"

name: Convert BERTopic pickle

on: workflow_dispatch

jobs:
  convert:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: stack-a
            pkgs: "numpy==1.26.4 numba==0.58.1 llvmlite==0.41.1 cloudpickle==2.2.1 umap-learn==0.5.5 hdbscan==0.8.33 scikit-learn==1.3.2 bertopic==0.15.0"
          - name: stack-b
            pkgs: "numpy==1.24.4 numba==0.57.1 llvmlite==0.40.1 cloudpickle==2.0.0 umap-learn==0.5.5 hdbscan==0.8.33 scikit-learn==1.2.2 bertopic==0.15.0"
          - name: stack-c            # <- most likely to match your new error
            pkgs: "numpy==1.23.5 numba==0.56.4 llvmlite==0.39.1 cloudpickle==1.6.0 umap-learn==0.5.3 hdbscan==0.8.29 scikit-learn==1.1.3 bertopic==0.14.1"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install pinned stack ${{ matrix.name }}
        run: |
          pip install --upgrade pip wheel setuptools
          pip install ${{ matrix.pkgs }}

      - name: Download pickle artifact
        run: |
          mkdir -p Model_training
          curl -L \
            -o Model_training/BERTopic_model \
            "https://github.com/ERSRisk/Tulane-Sentiment-Analysis/releases/download/rss_json/BERTopic_model"
          ls -l Model_training
          python - <<'PY'
          from pathlib import Path
          p = Path("Model_training/BERTopic_model")
          print("exists:", p.exists(), "size:", p.stat().st_size if p.exists() else 0)
          with open(p, "rb") as f:
              print("magic:", f.read(8))
          PY

      - name: Try load + convert to directory
        id: convert
        continue-on-error: true
        run: |
          python - <<'PY'
          import joblib, json, os, sys
          from pathlib import Path
          try:
              from bertopic import BERTopic
          except Exception as e:
              print("Cant import BERTopic:", e); sys.exit(2)

          p = Path("Model_training/BERTopic_model")
          print("Loading pickle from:", p)
          m = joblib.load(p)
          print("Loaded pickle OK. Converting to directory...")
          out = Path("Model_training/bertopic_dir")
          m.save(str(out), serialization="pytorch", save_ctfidf=True, save_embedding_model=True)
          print("Saved to:", out)
          PY

      - name: Upload converted dir (if succeeded)
        if: steps.convert.outcome == 'success'
        run: |
          cd Model_training
          zip -r bertopic_dir.zip bertopic_dir
          cd ..
        shell: bash

      - uses: actions/upload-artifact@v4
        if: steps.convert.outcome == 'success'
        with:
          name: bertopic_dir_${{ matrix.name }}
          path: Model_training/bertopic_dir.zip
